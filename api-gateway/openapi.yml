openapi: 3.0.0
info:
  title: User Authentication and Registration API
  description: API для регистрации и аутентификации пользователей
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: API Gateway

paths:
  /api/users/register:
    post:
      summary: Регистрация нового пользователя
      description: Создание нового пользователя с логином, паролем и электронной почтой
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Некорректный ввод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Пользователь с таким логином или email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/login:
    post:
      summary: Аутентификация пользователя
      description: Аутентификация по логину и паролю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/profile:
    get:
      summary: Получение профиля пользователя
      description: Получение всех данных профиля текущего пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Обновление профиля пользователя
      description: Обновление данных профиля текущего пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        '200':
          description: Профиль успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Некорректный ввод
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: johndoe
          minLength: 3
          maxLength: 50
        password:
          type: string
          format: password
          example: Password123!
          minLength: 8
          maxLength: 100
        email:
          type: string
          format: email
          example: john.doe@example.com

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
        password:
          type: string
          format: password
          example: Password123!

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user_id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        created_at:
          type: string
          format: date-time
          example: '2023-03-29T12:00:00Z'

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john.doe@example.com
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        birth_date:
          type: string
          format: date
          example: '1990-01-01'
        phone_number:
          type: string
          example: '+79001234567'
        address:
          type: string
          example: 'Moscow, Russia'
        created_at:
          type: string
          format: date-time
          example: '2023-03-29T12:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-03-29T12:00:00Z'

    ProfileUpdate:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        birth_date:
          type: string
          format: date
          example: '1990-01-01'
        phone_number:
          type: string
          example: '+79001234567'
        address:
          type: string
          example: 'Moscow, Russia'
        email:
          type: string
          format: email
          example: john.doe@example.com

    Error:
      type: object
      properties:
        error:
          type: string
          example: 'Некорректный ввод'
        details:
          type: object
          example: {"username": "Это поле обязательно"}